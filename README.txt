Team CCJ
Christopher Leonardi
Justin Shelley

Features:
	Reads in a text code file.
	Goes through the text file and pulls out tokens.
	Tokens are stored in a token struct.
	Tokens are then printed out with information about them.
	Tokens are parsed using a stack and predictive matrix.
	A parse tree is generated using this stack.
	An abstract syntax tree is generated by modifying the parse tree based on the rules of the grammar.
Known Bugs:
	Some blank strings are read in at the end of the file.
	The conversion to an abstract syntax tree is incorrect when it comes to converting kwdprint nodes. Need to fix.
	After running a file through the lexical analyzer, loading and running another file through will crash the program.

Usage:
	Run the program. 
	From the menu, select 1 to type in the name of the file.
	Select 2 to run a lexical scan. You will see an output of the tokens and the symbol table.
	Select 3 to parse the token list. You will see an output of the parse tree, followed by the AST after conversion.
Files Included:
	CParser.h
	Parser.h
	Lexer.h
	Compiler.h
	main.cpp
	EX1Parse.txt
	EX2Parse.txt
	EX3Parse.txt
	README.txt
	A1-GrammarNumbered.txt
	ParseMatrix.pdf
	Symboltable.h

portions primarily authored by Chris:
Token and Keyword Structs
Parser class default consructor
Parser.AddToken()
Parser.PrintToken()
Parser.StringRead()
Parser.KeywordCheck()
CParser class
SymbolTable class

Portions primarily authored by Justin:
Parser.ScanFile()
Parser.LoadTable()
Parser.ChangeTableState()
Parser.findColumn()
Parser.isAccepting()
ParseTree class

Functions worked on by both:
Parser.next_token()

TODO:
Justin: Fix conversions to AST around print node
Chris: Add comments
 
